package main

import (
	"fmt"
	"log"
	"path"

	"github.com/lukasjarosch/skipper"
	"github.com/mitchellh/mapstructure"
	"github.com/spf13/afero"
)

var (
	fileSystem    = afero.NewOsFs()
	inventoryPath = "inventory"
	classPath     = path.Join(inventoryPath, "classes")
	targetPath    = path.Join(inventoryPath, "targets")
	templatePath  = "templates"
	secretPath    = path.Join(inventoryPath, "secrets")
	outputPath    = "compiled"

	target = "develop"
)

func main() {
	inventory, err := skipper.NewInventory(fileSystem, classPath, targetPath, secretPath)
	if err != nil {
		panic(err)
	}

	predefinedVariables := map[string]interface{}{
		"target_name": target,
		"output_path": outputPath,
	}

	// Process the inventory, given the target name
	data, err := inventory.Data("develop", predefinedVariables, true, false)
	if err != nil {
		panic(err)
	}

	{

		type AutoGenerated struct {
			ProjectName string   `yaml:"project_name" mapstructure:"project_name"`
			Test        []string `yaml:"test" mapstructure:"test"`
			Var         string   `yaml:"var_iable" mapstructure:"var"`
		}
		out, err := data.GetPath("common")
		if err != nil {
			panic(err)
		}

		ag := AutoGenerated{}
		err = mapstructure.Decode(out, &ag)
		if err != nil {
			panic(fmt.Errorf("failed to decode struct: %w", err))
		}
		log.Printf("%#v", ag)
		log.Println(ag)

		data.SetPath(ag, "common", "transformed")
	}

	templateOutputPath := path.Join(outputPath, target)
	templater, err := skipper.NewTemplater(fileSystem, templatePath, templateOutputPath, nil)
	if err != nil {
		panic(err)
	}

	templateData := struct {
		Inventory  any
		TargetName string
	}{
		Inventory:  data,
		TargetName: target,
	}

	// execute templates  ----------------------------------------------------------------------------------

	err = templater.ExecuteAll(templateData, false, nil)
	if err != nil {
		panic(err)
	}

}
